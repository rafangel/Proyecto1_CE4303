            		+----------------------------------------------------+
			|        Principios de Sistemas Operativos           |
			|                    I semestre, 2017                |
			|   Documento de Diseño, Primer proyecto programado  |
			+----------------------------------------------------+
				   
---- GRUPO ----

Rafael Angel Chacón Fallas <rafangel1228@gmail.com>
Steven Fabian Ávila Ardón <sfaa03@gmail.com>


Calendarizador First Come, First Served
=======================================

---- Estructuras de datos ----

>> int64_t start;
> Tiempo, en "Ticks", de la última inserción del thread a la lista
 de "ready". 

>> int64_t elapsed_avg;
> Tiempo promedio, en "Ticks", que el proceso pasó esperando en la
 lista de "ready". 

>> int64_t prev_time;
> Tiempo , en "Ticks", en el que se ejecuta el thread, utilizado 
para el calculo de "elapsed_avg". 
 
>> int counter;
> Cantidad de veces que el proceso estuvo en la lista de "ready".


---- ALGORITMOS ----

>> El algoritmo toma como base el calendarizador por defecto de 
Round Robin. La primera modificación importante es la eliminación
 del Quantum con la variable "TIME_SLICE" ya que su utilización era 
innecesaria para el algoritmo FCFS y de esta forma el thread 
continuaba su ejecución hasta finalizar. La siguiente modificación se
 dió en la función schedule() del archivo thread.c, ya que se debía
 considerar el caso especial de los threads "idle" y "main", creados
 al inicio y eliminados hasta el final de la ejecución por el sistema.
 Dado que el algoritmo FCFS ejecuta cada thread hasta su finalización,
 se presentaba un ciclo de ejecución infinito ya que estos threads no
 liberaban el procesador. Para corregir esto, la función schedule()
 utiliza el algoritmo Round Robin, para dichos threads únicamente.

---- SYNC ----

>>Aunque este algoritmo no utiliza la función thread_set_priority(),
la condición de carrera esta presente desde la definición del 
algoritmo.
Un lock no sería relevante ya que solo un proceso tiene acceso a los
recursos simultaneamente y hasta su finalización.

---- JUSTIFICACION ----
>> Se decidió realizar esta solución ya que modificaba menos lineas
de código y por ende era menos propenso a errores, en comparación a
realizar la implementación del algoritmo desde cero.
>>Dada la necesidad de declarar casos especiales para los dos threads
mencionados, el algoritmo podría presentar problemas si se cambian 
los identificadores de dichos threads en algún momento, cayendo en 
el error mencionado anteriormente.
___________________________________________________________________


Calendarizador Colas Multinivel
=======================================

---- Estructuras de datos ----

>> int64_t start;
> Tiempo, en "Ticks", de la última inserción del thread a la lista 
de "ready". 

>> int64_t elapsed_avg;
> Tiempo promedio, en "Ticks", que el proceso pasó esperando en la
 lista de "ready". 
 
>> int counter;
> Cantidad de veces que el proceso estuvo en la lista de "ready".

>> int priority;  
> Valor de prioridad del thread, utilizado para seleccionar la cola 
correspondiente.

>> int niceness;
> Valor de amabilidad del thread, utilizado para el calculo de
"priority".
		
>> int load_avg;
> Tiempo promedio de carga, calculado con la cantidad de threads en 
espera en todas las colas.
			
>> int recent_cpu;
> Cantidad de tiempo de cpu dado al thread recientemente. Calculado 
utilizando "load_avg" y "niceness".

>> static struct list ready_list2;
>> static struct list ready_list3;
>> static struct list ready_list4;
> listas adicionales de prioridad inferior a la existente "ready_list".

---- ALGORITMOS ----

>> El algoritmo toma como base el calendarizador por defecto de 
Round Robin, realizando dos cambios importantes. El primero es la 
incorporación del cálculo de "priority", tal como se solicitó, 
basandose en los conceptos y fórmulas provistas, utilizando para ello 
los prototipos de funciones existentes. El segundo es la
incorporación de listas para el manejo de distintas prioridades. 
En total se utilizan 4 listas, basandose en el modelo propuesto por
Caltech en:
http://courses.cms.caltech.edu/cs124/lectures-wi2016/CS124Lec12.pdf 
Donde separan los procesos en los tipos: System, Interactive,
Interactive editing y Batch. Se utilizan todos los tipos pensando 
en su implementación futura, aunque para este trabajo solo se cuente
con los tipos "CPU Bounded" y "I/O Bounded".
Cada una de las listas mencionadas utiliza el algoritmo Round Robin
internamente para la calendarización de los threads. Esto con el fin 
de minimizar los efectos de la condición de carrera mencionada en 
el siguiente punto, así como para evitar starvation dentro de cada 
lista, sin embargo siempre existe esta posibilidad para procesos en 
distintas filas. 
Nuevamente se consideran casos especiales para los threads "idle" y
"main" ya que al no finalizar ocasionaban starvation en las listas 
de menor prioridad a la suya, esto se solucionó forzandolos a estar 
siempre en la lista de menor prioridad.


---- SYNC ----

>>La condición de carrera con la función thread_set_priority() se 
presenta ya que el orden en que los threads calculan su prioridad
afecta su ordenamiento en la lista dado el algoritmo Round Robin 
interno de cada lista. Sin embargo, precisamente por la utilización
de Round Robin el efecto de esta condicion de carrera reduce la 
cantidad de ciclos perdidos en espera.

---- JUSTIFICACION ----

>>Como se mencionó anteriormente, la selección de la cantidad de
listas se basó en lo propuesto por Caltech, en contra parte de la 
propuesta original de tener solo 2 listas para los dos tipos de 
threads solicitados. Esto permite además agrupar en mejor medida los
threads con prioridades más similares entre si.
>>Dada la necesidad de varias listas y a los calculos de prioridades, 
el algoritmo es más costoso en cuanto a recursos y desempeño. Por el
otro lado agiliza la ejecución de threads con una alta prioridad.
___________________________________________________________________


Calendarizador Shortest Job First
=======================================

---- Estructuras de datos ----

>> int64_t start;
> Tiempo, en "Ticks", de la última inserción del thread a la lista
 de "ready". 

>> int64_t elapsed_avg;
> Tiempo promedio, en "Ticks", que el proceso pasó esperando en la
 lista de "ready". 

>> int64_t prev_time;
> Tiempo , en "Ticks", en el que se ejecuta el thread, utilizado 
para el calculo de "elapsed_avg". 
 
>> int counter;
> Cantidad de veces que el proceso estuvo en la lista de "ready".

>> int64_t exe_time;
> Tiempo de ejecucion de la funcion del hilo.

>> void init_thread2
> Funcion encargada de asignar el valor del execution time



---- ALGORITMOS ----

>> Este algoritmo se encarga de procesar tareas y las prioriza por
el trabajo mas corto. Para saber los tiempos de ejecucion se hace 
por medio de pruebas aparte esto la misma recomendacion de la 
profesora. Se tienen dos fuciones en el archivo de prueba. Cada 
una de las funciones tiene tiempos de ejecucion distintos 
dependiendo de si es una operacion i/o bounded o cpu bounded entonces
sabiendo que es se asigna el tiempo.
>> En el archivo thread.h se agrega un parametro al thread llamado 
exe_time que es la variable con el tiempo de ejecucion de cada hilo. 
Para poder acceder a estos valores y no tener que implementar mas 
codigo, un constructor o hasta replicacion de codigo se hace un get
y un set de exe_time para desde el archivo de pruebas asignar el 
tiempo de ejecucion.
Sin embargo se dede de contar con una funcion init_thread2 que se encarga 
de asignar el valor de tiempo de ejecucion que viene desde el archivo 
de pruebas.

---- SYNC ----

>>  Para el algoritmo no se tiene una condicion de carrera en 
thread_set_priority(). Esto por que el algoritmo que se diseña es 
apropiativo. El hecho de que sea apropiativo implica que el trabajo 
mas corto se apropia del recurso hasta que termine su ejecucion. 
Esto sin importar si ahora hay un proceso que dure menos con el que 
se puede cambiar.
Un lock no va a ser necesario por que en ningun momento se van a tener 
dos procesos compitiendo por el mismo espacio en la region critica.


---- JUSTIFICACION ----

***Agregar que se trato dinamicamente para cada thread pero el timer de pintos presento problemas por el uso de ticks y on uno timepo real de ejecucion

>>Describa la razon por la que se decidio implementar este diseño 
y en que maneras es superior a otras soluciones que consideraron.

>> Para la implementacion del algoritmo se tomaron en cuenta aspectos 
como rendimiento, modificacion, alteracion y cambios en el codigo 
original que pudiera generar errores o la posibilidad crear nuevos 
modulos encargados de efectuar el algoritmo. Al final se toma la decision
de diseñar el algoritmo asignando el tiempo de cada funcion dependiendo
de la funcion con la que se estuviera trabajando.
>> En un inicio se trato de hacer dinamicamente para cada thread. El objetivo
era que en el momento que se creaba se calculara el tiempo de ejecucion de 
cada funcion pero el timer que implementa pintos presento problemas por el 
uso de ticks. El pricipal problema era que la funcion contaba la cantidad de 
ticks desde el momento que se "booteaba" el sistema operativo y en un momento
dado se iba a tornar constante sin importar el tamaño de la funcion que se 
estaba ejecutando. 
>> Con un timer que indicara el tiempo real de ejecucion la implementacion
en tiempo real hubiera sido mas sencilla y eficiente.


>> El algoritmo cumple con el objetivo y se implementa como es. Sin embargo
de poder calcular los tiempos de forma dinamica haria el algoritmo mucho
mas eficiente. Para fines educativos se implementa la solucion conociendo
por aparte los tiempos que tardan cada funcion y dependiendo de la funcion
que se implementa se asigna el tiempo de ejecucion. Ahora es claro que
entre mas procesos ejecutandose y que tenga un tiempo de ejecucion muy 
pequeño se van a tener mas cambios de contexto. Sin embargo la funcion que
se encarga de indicar cual proceso se debe de ejecutar ya recibe todo los 
procesos ordenados empezando por el proceso con el menor tiempo de ejecucion.
>> En caso de recibir un proceso nuevo con un tiempo de ejecucion el mismo se
inserta al inicio de la lista para ser ejecutado. Esto no afecta el desempeño
del procesador por que la politica del algoritmo es ejecutar el proceso mas
corto de primero y la lista de procesos siempre tiene los con tiempo de ejecucion
menor al inicio.

___________________________________________________________________ 


Calendarizador Round Robin
=======================================

---- Estructuras de datos ----

>> int64_t start;
> Tiempo, en "Ticks", de la última inserción del thread a la lista
 de "ready". 

>> int64_t elapsed_avg;
> Tiempo promedio, en "Ticks", que el proceso pasó esperando en la
 lista de "ready". 

>> int64_t prev_time;
> Tiempo , en "Ticks", en el que se ejecuta el thread, utilizado 
para el calculo de "elapsed_avg". 
 
>> int counter;
> Cantidad de veces que el proceso estuvo en la lista de "ready".


---- ALGORITMOS ----

>> Explique en prosa el funcionamiento de su algoritmo, utilizando 
el nombre de las variables utilizadas y funciones.
Este algoritmo calendariza los procesos asignando el procesador por 
un tiempo determinado. Este tiempo determinado es el quantum. El quantun 
debe ser inferior a la duracion promedio del 80% de los procesos 
(Silberchatz, Galvin y Gagne 2010:188). Este primera recomendacion es
del libro citado sim emargo en clase tambien se hace una recomendacion
de hacer un quantum de aproximadamente la mitad del tiempo que mas dure.
El algoritmo toma la variable TIME_SLICE definida con un valor de 30.
Dependiendo el proceso y su valor posicion en la cola es el que se ejecuta.
El procesador va a ejecutar el proceso del head de la lista pero cuando se 
acaba el quantum este proceso se vuelve a calendarizar poniendolo en la cola 
de la cola. Cada vez que inicie un nuevo proceso se pone en la cola.


---- SYNC ----

>> Si se va a tener una condicion de carrera sin embargo conociendo
el tiempo de los procesos se puede definir un quantum dinamico. Claro 
esta el hecho de poder definir un quantum de esta forma seria la forma
ideal mas no la real. Basados en las recomendaciones, metodos estadisticos
y pruebas se puede definir un quantum lo mas cercano al ideal. La 
condicion de carrea es clara pero sin nos ponemos criticos al comparar con 
otros algoritmos no va a ser tanta pues cada proceso va a desocupar el 
procesador una vez finalice el quantum.

---- JUSTIFICACION ----
>>Describa la razon por la que se decidio implementar este diseño 
y en que maneras es superior a otras soluciones que consideraron.
>>Realize una corta critica, positiva o negativa, sobre su 
algoritmo y describa como los cambios de contexto en este 
calendarizador y las reglas y politicas implementadas afectan el 
desempeño del procesador.

>> Para el diseño se toma como pieza fundamental definir un quantum
correcto. Se parte de que se saben los tiempos de ejecucion de los procesos 
que se ejecutan. Tomando en cuenta las recomendaciones del libro de Galvin y 
Gagne y lo visto en clase se establece un quantum de 30. 
>> La funcion que dura mas tiempo es de 144 ticks y la de menos es de 25 ticks
por lo que se decide como decisionde diseño un quantum de 30. Esto para que los 
procesos pequeños terminen en un quantum. El problema de definir un quantum
muy pequeño es que los cambios de contexto van a ser muy seguidos y no es lo 
recomendable. Por otro lado se tiene que si se define un quantum muy grande 
los procesos pequeños van a desaprovechar tiempo pues van a terminar su ejecucion
aunque el quantum todavia no finalice.

___________________________________________________________________
